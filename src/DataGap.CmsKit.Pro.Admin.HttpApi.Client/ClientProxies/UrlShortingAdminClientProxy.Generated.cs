// This file is automatically generated by JELLOG framework to use MVC Controllers from CSharp
using System;
using System.Threading.Tasks;
using DataGap.Jellog.Application.Dtos;
using DataGap.Jellog.Http.Client;
using DataGap.Jellog.Http.Modeling;
using DataGap.Jellog.DependencyInjection;
using DataGap.Jellog.Http.Client.ClientProxying;
using DataGap.CmsKit.Admin.UrlShorting;

// ReSharper disable once CheckNamespace
namespace DataGap.CmsKit.Admin.UrlShorting.ClientProxies;

[Dependency(ReplaceServices = true)]
[ExposeServices(typeof(IUrlShortingAdminAppService), typeof(UrlShortingAdminClientProxy))]
public partial class UrlShortingAdminClientProxy : ClientProxyBase<IUrlShortingAdminAppService>, IUrlShortingAdminAppService
{
    public virtual async Task<PagedResultDto<ShortenedUrlDto>> GetListAsync(GetShortenedUrlListInput input)
    {
        return await RequestAsync<PagedResultDto<ShortenedUrlDto>>(nameof(GetListAsync), new ClientProxyRequestTypeValue
        {
            { typeof(GetShortenedUrlListInput), input }
        });
    }

    public virtual async Task<ShortenedUrlDto> GetAsync(Guid id)
    {
        return await RequestAsync<ShortenedUrlDto>(nameof(GetAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<ShortenedUrlDto> CreateAsync(CreateShortenedUrlDto input)
    {
        return await RequestAsync<ShortenedUrlDto>(nameof(CreateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(CreateShortenedUrlDto), input }
        });
    }

    public virtual async Task<ShortenedUrlDto> UpdateAsync(Guid id, UpdateShortenedUrlDto input)
    {
        return await RequestAsync<ShortenedUrlDto>(nameof(UpdateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(UpdateShortenedUrlDto), input }
        });
    }

    public virtual async Task DeleteAsync(Guid id)
    {
        await RequestAsync(nameof(DeleteAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }
}
