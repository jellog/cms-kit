// This file is automatically generated by JELLOG framework to use MVC Controllers from CSharp
using System;
using System.Threading.Tasks;
using DataGap.Jellog.Application.Dtos;
using DataGap.Jellog.Http.Client;
using DataGap.Jellog.Http.Modeling;
using DataGap.Jellog.DependencyInjection;
using DataGap.Jellog.Http.Client.ClientProxying;
using DataGap.CmsKit.Admin.Polls;

// ReSharper disable once CheckNamespace
namespace DataGap.CmsKit.Admin.Polls.ClientProxies;

[Dependency(ReplaceServices = true)]
[ExposeServices(typeof(IPollAdminAppService), typeof(PollAdminClientProxy))]
public partial class PollAdminClientProxy : ClientProxyBase<IPollAdminAppService>, IPollAdminAppService
{
    public virtual async Task<PagedResultDto<PollDto>> GetListAsync(GetPollListInput input)
    {
        return await RequestAsync<PagedResultDto<PollDto>>(nameof(GetListAsync), new ClientProxyRequestTypeValue
        {
            { typeof(GetPollListInput), input }
        });
    }

    public virtual async Task<PollWithDetailsDto> GetAsync(Guid id)
    {
        return await RequestAsync<PollWithDetailsDto>(nameof(GetAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<PollWithDetailsDto> CreateAsync(CreatePollDto input)
    {
        return await RequestAsync<PollWithDetailsDto>(nameof(CreateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(CreatePollDto), input }
        });
    }

    public virtual async Task<PollWithDetailsDto> UpdateAsync(Guid id, UpdatePollDto input)
    {
        return await RequestAsync<PollWithDetailsDto>(nameof(UpdateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(UpdatePollDto), input }
        });
    }

    public virtual async Task DeleteAsync(Guid id)
    {
        await RequestAsync(nameof(DeleteAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<ListResultDto<PollWidgetDto>> GetWidgetsAsync()
    {
        return await RequestAsync<ListResultDto<PollWidgetDto>>(nameof(GetWidgetsAsync));
    }

    public virtual async Task<GetResultDto> GetResultAsync(Guid id)
    {
        return await RequestAsync<GetResultDto>(nameof(GetResultAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }
}
