// This file is automatically generated by JELLOG framework to use MVC Controllers from CSharp
using System;
using System.Threading.Tasks;
using DataGap.Jellog.Application.Dtos;
using DataGap.Jellog.Http.Client;
using DataGap.Jellog.Http.Modeling;
using DataGap.Jellog.DependencyInjection;
using DataGap.Jellog.Http.Client.ClientProxying;
using DataGap.CmsKit.Admin.Newsletters;
using System.Collections.Generic;
using DataGap.Jellog.Content;

// ReSharper disable once CheckNamespace
namespace DataGap.CmsKit.Admin.Newsletters.ClientProxies;

[Dependency(ReplaceServices = true)]
[ExposeServices(typeof(INewsletterRecordAdminAppService), typeof(NewsletterRecordAdminClientProxy))]
public partial class NewsletterRecordAdminClientProxy : ClientProxyBase<INewsletterRecordAdminAppService>, INewsletterRecordAdminAppService
{
    public virtual async Task<PagedResultDto<NewsletterRecordDto>> GetListAsync(GetNewsletterRecordsRequestInput input)
    {
        return await RequestAsync<PagedResultDto<NewsletterRecordDto>>(nameof(GetListAsync), new ClientProxyRequestTypeValue
        {
            { typeof(GetNewsletterRecordsRequestInput), input }
        });
    }

    public virtual async Task<NewsletterRecordWithDetailsDto> GetAsync(Guid id)
    {
        return await RequestAsync<NewsletterRecordWithDetailsDto>(nameof(GetAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<List<NewsletterRecordCsvDto>> GetNewsletterRecordsCsvDetailAsync(GetNewsletterRecordsCsvRequestInput input)
    {
        return await RequestAsync<List<NewsletterRecordCsvDto>>(nameof(GetNewsletterRecordsCsvDetailAsync), new ClientProxyRequestTypeValue
        {
            { typeof(GetNewsletterRecordsCsvRequestInput), input }
        });
    }

    public virtual async Task<List<String>> GetNewsletterPreferencesAsync()
    {
        return await RequestAsync<List<String>>(nameof(GetNewsletterPreferencesAsync));
    }

    public virtual async Task<IRemoteStreamContent> GetCsvResponsesAsync(GetNewsletterRecordsCsvRequestInput input)
    {
        return await RequestAsync<IRemoteStreamContent>(nameof(GetCsvResponsesAsync), new ClientProxyRequestTypeValue
        {
            { typeof(GetNewsletterRecordsCsvRequestInput), input }
        });
    }
}
